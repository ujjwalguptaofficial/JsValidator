{"version":3,"file":"JsValidator.js","sourceRoot":"","sources":["../Script/Business/MainLogic.ts","../Script/index.ts"],"names":[],"mappings":"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","sourcesContent":["enum DataType {\r\n    Email,\r\n    Mobile,\r\n    Required,\r\n    Url\r\n}\r\n\r\ninterface IError {\r\n    ErrorMsg: string,\r\n    Type: DataType,\r\n    Code: Function,\r\n    Regex: any,\r\n    MinLength: number,\r\n    MaxLength: number\r\n}\r\n\r\ninterface IOutResult {\r\n    Error: boolean,\r\n    Message: string\r\n}\r\n\r\nclass Helper {\r\n    Errors: Array<IError> = [];\r\n    protected getErrorType = function (error) {\r\n        switch (error.toLowerCase()) {\r\n            case 'email': return DataType.Email;\r\n            case 'mobile': return DataType.Mobile;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the error message\r\n     * \r\n     * @protected\r\n     * \r\n     * @memberOf Helper\r\n     */\r\n    protected getErrorMsg = function (errorType) {\r\n        var ErrorMessage = null;\r\n        this.Errors.array.forEach(function (item) {\r\n            if (item.Type == errorType) {\r\n                ErrorMessage = item.ErrorMsg;\r\n            }\r\n        });\r\n        if (ErrorMessage == null) {\r\n            return this.getDefaultErrorMsg(errorType);\r\n        }\r\n        return ErrorMessage;\r\n    }\r\n\r\n    private getDefaultErrorMsg = function (errorType) {\r\n        var Msg;\r\n        switch (errorType) {\r\n            case DataType.Required:\r\n                Msg = \"Required Field\";\r\n                break;\r\n            case DataType.Email:\r\n                Msg = \"Invalid Email\";\r\n                break;\r\n            case DataType.Email:\r\n                Msg = \"Invalid Mobile\";\r\n                break;\r\n        }\r\n        return Msg;\r\n    }\r\n\r\n    /**\r\n     * check whether value is valid or not\r\n     * \r\n     * @protected\r\n     * \r\n     * @memberOf Helper\r\n     */\r\n    protected isValid = function (value, type) {\r\n        var ErrorOccured: boolean, That = this;\r\n        this.Errors.forEach(function (item) {\r\n            if (type = item.Type) {\r\n                ErrorOccured = That.validateData(value, item);\r\n            }\r\n        });\r\n        if (ErrorOccured == null) {\r\n            ErrorOccured = That.validateData(value, { Type: type });\r\n        }\r\n        return ErrorOccured;\r\n    }\r\n\r\n    private validateData = function (value: string, error: IError) {\r\n        if (error.Regex) {\r\n            return error.Regex.test;\r\n        }\r\n        else if (error.Code) {\r\n            return error.Code();\r\n        }\r\n        else if (error.MinLength) {\r\n            return value.length >= error.MinLength;\r\n        }\r\n        else if (error.MaxLength) {\r\n            return value.length <= error.MaxLength;\r\n        }\r\n        else {\r\n            switch (error.Type) {\r\n                case DataType.Email:\r\n                    error.Regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    break;\r\n                case DataType.Mobile:\r\n                    error.Regex = /^[789]\\d{9}$/;\r\n                    break;\r\n                case DataType.Url:\r\n                    error.Regex = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n                    break;\r\n            }\r\n            return error.Regex.test;\r\n        }\r\n    }\r\n}\r\n\r\nclass JsValidator extends Helper {\r\n    constructor(errors: Array<IError> = []) {\r\n        super();\r\n        var That = this;\r\n        errors.forEach(function (item) {\r\n            item.Type = That.getErrorType(item.Type);\r\n            That.Errors.push(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * validate the value\r\n     * \r\n     * \r\n     * @memberOf JsValidator\r\n     */\r\n    validate = function (value, error: IError, isReq = true): IOutResult {\r\n        if (isReq) {\r\n            return <IOutResult>{\r\n                Error: true, Message: this.getErrorMsg(DataType.Required)\r\n            };\r\n        }\r\n        if (error != null) {\r\n            return <IOutResult>{\r\n                Error: this.isValid(value, this.getErrorType(error)), Message: this.getErrorMsg(error.Type)\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     * set the error definition\r\n     * \r\n     * \r\n     * @memberOf JsValidator\r\n     */\r\n    setErrorDef = function (error) {\r\n        this.Errors.forEach(function (item, index) {\r\n            if (item.Type == error.Type) {\r\n                this.Errors.splice(index, 1);\r\n                return;\r\n            }\r\n        });\r\n        this.Errors.push(error);\r\n    }\r\n\r\n}\r\n\r\n","\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n"]}